from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters
)
from uuid import uuid4
import logging
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ADMIN_IDS = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
MESSAGE_RETENTION_DAYS = 30

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
users = {}
pending_messages = {}
all_messages = []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞

def generate_anon_id():
    return str(uuid4())

def cleanup_old_messages():
    global pending_messages, all_messages
    cutoff = datetime.now() - timedelta(days=MESSAGE_RETENTION_DAYS)
    
    # –û—á–∏—Å—Ç–∫–∞ pending_messages
    for receiver in list(pending_messages.keys()):
        pending_messages[receiver] = [
            msg for msg in pending_messages[receiver]
            if msg['timestamp'] > cutoff
        ]
        if not pending_messages[receiver]:
            del pending_messages[receiver]
    
    # –û—á–∏—Å—Ç–∫–∞ all_messages
    all_messages = [msg for msg in all_messages if msg['timestamp'] > cutoff]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    anon_id = next((uid for uid, data in users.items() if data["tg_id"] == user.id), None)
    
    if not anon_id:
        anon_id = generate_anon_id()
        users[anon_id] = {"tg_id": user.id, "contacts": []}
    
    cleanup_old_messages()
    if pending_messages.get(anon_id):
        for msg in pending_messages[anon_id]:
            try:
                await context.bot.send_message(
                    chat_id=user.id,
                    text=f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–Ω–æ–Ω–∏–º–∞:\n\n{msg['text']}\n\n"
                         f"üïí {msg['timestamp'].strftime('%d.%m.%Y %H:%M')}"
                )
                # –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∞
                all_messages.append({
                    "sender": msg['sender'],
                    "receiver": anon_id,
                    "text": msg['text'],
                    "timestamp": msg['timestamp']
                })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        pending_messages[anon_id] = []
    
    keyboard = [
        [InlineKeyboardButton("–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
        [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—É", callback_data='new_contact')],
        [InlineKeyboardButton("–ú–æ–π ID", callback_data='show_id')],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')]
    ]
    
    await update.message.reply_text(
        f'üëã –í–∞—à –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID: `{anon_id}`\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ /help',
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id in ADMIN_IDS:
        await admin_menu(update, context)
    else:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")

async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É", callback_data='admin_view_chat')],
        [InlineKeyboardButton("–ü–æ–∏—Å–∫ –ø–æ ID", callback_data='admin_search_id')],
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", callback_data='admin_exit')]
    ]
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text(
            "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def admin_view_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    context.user_data["admin_mode"] = "view_chat"
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ –ø–µ—Ä–µ–ø–∏—Å–∫–∏:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]])
    )

async def admin_search_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    context.user_data["admin_mode"] = "search_id"
    await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å ID –∏–ª–∏ Telegram ID –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]])
    )

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}
- –ù–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {sum(len(msgs) for msgs in pending_messages.values())}
- –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(all_messages)}
"""
    await query.edit_message_text(
        stats_text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin_back')]])
    )

async def admin_exit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    context.user_data.pop("admin_mode", None)
    await query.edit_message_text(
        "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data='start_menu')]])
    )

async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id not in ADMIN_IDS:
        return
    
    text = update.message.text
    mode = context.user_data.get("admin_mode")
    
    if mode == "view_chat":
        user_id = text.strip()
        messages = [msg for msg in all_messages if msg['sender'] == user_id or msg['receiver'] == user_id]
        
        if not messages:
            await update.message.reply_text(f"–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –¥–ª—è ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        messages_sorted = sorted(messages, key=lambda x: x['timestamp'])
        response = [f"üìñ –ü–µ—Ä–µ–ø–∏—Å–∫–∞ –¥–ª—è ID {user_id}:\n"]
        
        for msg in messages_sorted[-10:]:
            direction = "‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if msg['sender'] == user_id else "‚¨ÖÔ∏è –ü–æ–ª—É—á–µ–Ω–æ"
            response.append(
                f"{direction} {msg['timestamp'].strftime('%d.%m.%Y %H:%M')}\n"
                f"ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {msg['receiver'] if msg['sender'] == user_id else msg['sender']}\n"
                f"–¢–µ–∫—Å—Ç: {msg['text']}\n"
            )
        
        await update.message.reply_text("\n".join(response))
    
    elif mode == "search_id":
        search_term = text.strip()
        found_users = []
        
        # –ü–æ–∏—Å–∫ –ø–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–º—É ID
        for uid, data in users.items():
            if search_term.lower() in uid.lower():
                found_users.append((uid, data))
        
        # –ü–æ–∏—Å–∫ –ø–æ Telegram ID
        if search_term.isdigit():
            tg_id = int(search_term)
            for uid, data in users.items():
                if data["tg_id"] == tg_id:
                    found_users.append((uid, data))
        
        if not found_users:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        response = ["üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:"]
        for uid, data in found_users[:5]:
            response.append(f"–ê–Ω–æ–Ω–∏–º–Ω—ã–π ID: {uid}")
            response.append(f"Telegram ID: {data['tg_id']}")
            response.append(f"–ö–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(data['contacts'])}")
            response.append("------")
        
        await update.message.reply_text("\n".join(response))
    
    await admin_menu(update, context)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìö *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*

*–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è:*
1. –ù–∞–∂–º–∏—Ç–µ "–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—É"
2. –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
3. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

*–ö–∞–∫ —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è:*
- –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (/start)
- –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É

‚ö†Ô∏è *–í–∞–∂–Ω–æ:*
- –°–æ–æ–±—â–µ–Ω–∏—è —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ 30 –¥–Ω–µ–π
- –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–π ID –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
    if user.id in ADMIN_IDS:
        if query.data == 'admin_view_chat':
            await admin_view_chat(update, context)
            return
        elif query.data == 'admin_search_id':
            await admin_search_id(update, context)
            return
        elif query.data == 'admin_stats':
            await admin_stats(update, context)
            return
        elif query.data == 'admin_back':
            await admin_menu(update, context)
            return
        elif query.data == 'admin_exit':
            await admin_exit(update, context)
            return
        elif query.data == 'start_menu':
            await start(update, context)
            return
    
    anon_id = next((uid for uid, data in users.items() if data["tg_id"] == user.id), None)
    
    if not anon_id:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞–∂–º–∏—Ç–µ /start")
        return
    
    if query.data == 'contacts':
        if not users[anon_id]["contacts"]:
            await query.edit_message_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        else:
            keyboard = [
                [InlineKeyboardButton(f"üíå –ù–∞–ø–∏—Å–∞—Ç—å {contact[:8]}...", callback_data=f'write_{contact}')]
                for contact in users[anon_id]["contacts"]
            ]
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')])
            await query.edit_message_text(
                "üìí –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    
    elif query.data == 'new_contact':
        context.user_data["awaiting_contact_id"] = True
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –∫–æ–Ω—Ç–∞–∫—Ç–∞:")
    
    elif query.data == 'show_id':
        await query.edit_message_text(f"üîë –í–∞—à ID:\n`{anon_id}`", parse_mode='Markdown')
    
    elif query.data == 'help':
        await help_command(update, context)
    
    elif query.data == 'back_to_main':
        keyboard = [
            [InlineKeyboardButton("–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
            [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—É", callback_data='new_contact')],
            [InlineKeyboardButton("–ú–æ–π ID", callback_data='show_id')],
            [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')]
        ]
        await query.edit_message_text(
            "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif query.data.startswith('write_'):
        contact_id = query.data[6:]
        if contact_id not in users[anon_id]["contacts"]:
            await query.edit_message_text("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        context.user_data["current_contact"] = contact_id
        await query.edit_message_text(f"‚úâÔ∏è –ü–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {contact_id[:8]}...:")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user.id in ADMIN_IDS and context.user_data.get("admin_mode"):
        await handle_admin_message(update, context)
        return
    
    anon_id = next((uid for uid, data in users.items() if data["tg_id"] == user.id), None)
    
    if not anon_id:
        await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞–∂–º–∏—Ç–µ /start")
        return
    
    cleanup_old_messages()
    if pending_messages.get(anon_id):
        for msg in pending_messages[anon_id]:
            try:
                await update.message.reply_text(
                    f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–Ω–æ–Ω–∏–º–∞:\n\n{msg['text']}\n\n"
                    f"üïí {msg['timestamp'].strftime('%d.%m.%Y %H:%M')}"
                )
                # –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∞
                all_messages.append({
                    "sender": msg['sender'],
                    "receiver": anon_id,
                    "text": msg['text'],
                    "timestamp": msg['timestamp']
                })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        pending_messages[anon_id] = []
        return
    
    if context.user_data.get("awaiting_contact_id"):
        contact_id = message_text.strip()
        
        if contact_id == anon_id:
            await update.message.reply_text("üö´ –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
        elif contact_id in users:
            if contact_id not in users[anon_id]["contacts"]:
                users[anon_id]["contacts"].append(contact_id)
                await update.message.reply_text(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
            else:
                await update.message.reply_text("‚ÑπÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ")
        else:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        context.user_data["awaiting_contact_id"] = False
        return
    
    if "current_contact" in context.user_data:
        contact_id = context.user_data["current_contact"]
        
        if contact_id not in users:
            await update.message.reply_text("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            context.user_data.pop("current_contact", None)
            return
        
        if len(message_text) > 4000:
            await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–∞–∫—Å. 4000 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        
        if contact_id not in pending_messages:
            pending_messages[contact_id] = []
        
        pending_messages[contact_id].append({
            "sender": anon_id,
            "text": message_text,
            "timestamp": datetime.now()
        })
        
        # –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∞
        all_messages.append({
            "sender": anon_id,
            "receiver": contact_id,
            "text": message_text,
            "timestamp": datetime.now()
        })
        
        try:
            await context.bot.send_message(
                chat_id=users[contact_id]["tg_id"],
                text=f"üîî –£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–Ω–æ–Ω–∏–º–∞!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!")
        context.user_data.pop("current_contact", None)
        return
    
    keyboard = [
        [InlineKeyboardButton("–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
        [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—É", callback_data='new_contact')],
        [InlineKeyboardButton("–ú–æ–π ID", callback_data='show_id')],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')]
    ]
    await update.message.reply_text(
        "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def main():
    application = ApplicationBuilder().token("–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê").build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    application.run_polling()

if __name__ == '__main__':
    main()
