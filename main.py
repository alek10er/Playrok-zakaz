from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from uuid import uuid4
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
users = {}
pending_messages = {}

def generate_anon_id():
    return str(uuid4())

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    tg_user = update.effective_user
    anon_id = next((uid for uid, data in users.items() if data["tg_id"] == tg_user.id), None)
    
    if not anon_id:
        anon_id = generate_anon_id()
        users[anon_id] = {"tg_id": tg_user.id, "contacts": []}
    
    keyboard = [
        [InlineKeyboardButton("–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
        [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É", callback_data='new_contact')],
        [InlineKeyboardButton("–ú–æ–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID", callback_data='show_id')],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')]
    ]
    
    await update.message.reply_text(
        f'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í–∞—à ID: {anon_id}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = """
üìö –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:

–≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä. –í–∞—à ID —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –°–ø—Ä–∞–≤–∫–∞

–ö–∞–∫ –ø–∏—Å–∞—Ç—å:
1. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ ID
2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
"""
    await update.message.reply_text(help_text)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    tg_user = query.from_user
    anon_id = next((uid for uid, data in users.items() if data["tg_id"] == tg_user.id), None)
    
    if not anon_id:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if query.data == 'contacts':
        if not users[anon_id]["contacts"]:
            await query.edit_message_text("–ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–µ—Ç")
        else:
            contacts_list = "\n".join(users[anon_id]["contacts"])
            keyboard = [
                [InlineKeyboardButton(f"–ù–∞–ø–∏—Å–∞—Ç—å {contact}", callback_data=f'write_{contact}')] 
                for contact in users[anon_id]["contacts"]
            ]
            keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')])
            await query.edit_message_text(
                f"–ö–æ–Ω—Ç–∞–∫—Ç—ã:\n{contacts_list}",
                reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif query.data == 'new_contact':
        context.user_data["awaiting_contact_id"] = True
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–Ω—Ç–∞–∫—Ç–∞:")
    
    elif query.data == 'show_id':
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back_to_main')]]
        await query.edit_message_text(
            f"–í–∞—à ID:\n{anon_id}",
            reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif query.data == 'back_to_main':
        await show_main_menu(query)
    
    elif query.data == 'help':
        await help_command(update, context)
        await query.message.delete()
    
    elif query.data.startswith('write_'):
        contact_id = query.data[6:]
        if contact_id not in users[anon_id]["contacts"]:
            await query.edit_message_text("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        context.user_data["current_contact"] = contact_id
        await query.edit_message_text(f"–ü–∏—à–∏—Ç–µ {contact_id}:")

async def show_main_menu(query):
    keyboard = [
        [InlineKeyboardButton("–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
        [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É", callback_data='new_contact')],
        [InlineKeyboardButton("–ú–æ–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID", callback_data='show_id')],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')]
    ]
    await query.edit_message_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    tg_user = update.effective_user
    message_text = update.message.text
    
    anon_id = next((uid for uid, data in users.items() if data["tg_id"] == tg_user.id), None)
    
    if not anon_id:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if context.user_data.get("awaiting_contact_id"):
        contact_id = message_text.strip()
        
        if contact_id == anon_id:
            await update.message.reply_text("–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è!")
            context.user_data["awaiting_contact_id"] = False
            return
        
        if contact_id in users:
            if contact_id not in users[anon_id]["contacts"]:
                users[anon_id]["contacts"].append(contact_id)
                await update.message.reply_text(f"–ö–æ–Ω—Ç–∞–∫—Ç {contact_id} –¥–æ–±–∞–≤–ª–µ–Ω!")
            else:
                await update.message.reply_text("–ö–æ–Ω—Ç–∞–∫—Ç —É–∂–µ –µ—Å—Ç—å")
        else:
            await update.message.reply_text("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        context.user_data["awaiting_contact_id"] = False
        return
    
    if "current_contact" in context.user_data:
        contact_id = context.user_data["current_contact"]
        
        if contact_id not in users:
            await update.message.reply_text("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            context.user_data.pop("current_contact", None)
            return
        
        if len(message_text) > 4000:
            await update.message.reply_text("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        
        if contact_id not in pending_messages:
            pending_messages[contact_id] = []
        
        pending_messages[contact_id].append({
            "sender": anon_id,
            "text": message_text
        })
        
        await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        
        receiver_tg_id = users[contact_id]["tg_id"]
        try:
            await context.bot.send_message(
                receiver_tg_id,
                f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {anon_id}!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        
        context.user_data.pop("current_contact", None)
        return
    
    if anon_id in pending_messages and pending_messages[anon_id]:
        for msg in pending_messages[anon_id]:
            await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {msg['sender']}:\n{msg['text']}")
        pending_messages[anon_id] = []

def main() -> None:
    # –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    application = Application.builder().token("–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨").build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    application.run_polling()

if __name__ == '__main__':
    main()
