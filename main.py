from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters
)
from uuid import uuid4
import logging
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
users = {}  # {anon_id: {"tg_id": tg_id, "contacts": [other_anon_ids]}}
pending_messages = {}  # {receiver_anon_id: [{"sender": sender_anon_id, "text": text, "timestamp": datetime}]}

def generate_anon_id():
    return str(uuid4())

def cleanup_old_messages():
    """–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π"""
    global pending_messages
    cutoff = datetime.now() - timedelta(days=30)
    for receiver in list(pending_messages.keys()):
        pending_messages[receiver] = [
            msg for msg in pending_messages[receiver] 
            if msg['timestamp'] > cutoff
        ]
        if not pending_messages[receiver]:
            del pending_messages[receiver]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    anon_id = next((uid for uid, data in users.items() if data["tg_id"] == user.id), None)
    
    if not anon_id:
        anon_id = generate_anon_id()
        users[anon_id] = {"tg_id": user.id, "contacts": []}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ç–∞—Ä—Ç–µ
    cleanup_old_messages()
    if pending_messages.get(anon_id):
        for msg in pending_messages[anon_id]:
            try:
                await context.bot.send_message(
                    chat_id=user.id,
                    text=f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {msg['sender']}:\n\n{msg['text']}\n\n"
                         f"üïí {msg['timestamp'].strftime('%d.%m.%Y %H:%M')}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        pending_messages[anon_id] = []
    
    keyboard = [
        [InlineKeyboardButton("–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
        [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—É", callback_data='new_contact')],
        [InlineKeyboardButton("–ú–æ–π ID", callback_data='show_id')],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')]
    ]
    
    await update.message.reply_text(
        f'üëã –í–∞—à –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID: `{anon_id}`\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ /help',
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìö *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*

*–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è:*
1. –ù–∞–∂–º–∏—Ç–µ "–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—É"
2. –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
3. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

*–ö–∞–∫ —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è:*
- –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (/start)
- –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É

*–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:*
- –≠—Ç–æ —Å–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å
- –î–æ–±–∞–≤–ª—è–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—É"

‚ö†Ô∏è *–í–∞–∂–Ω–æ:*
- –°–æ–æ–±—â–µ–Ω–∏—è —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ 30 –¥–Ω–µ–π
- –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–π ID –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º
- –ë–æ—Ç –Ω–µ —Ö—Ä–∞–Ω–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    anon_id = next((uid for uid, data in users.items() if data["tg_id"] == user.id), None)
    
    if not anon_id:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞–∂–º–∏—Ç–µ /start")
        return
    
    if query.data == 'contacts':
        if not users[anon_id]["contacts"]:
            await query.edit_message_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        else:
            keyboard = [
                [InlineKeyboardButton(f"üíå –ù–∞–ø–∏—Å–∞—Ç—å {contact[:8]}...", callback_data=f'write_{contact}')] 
                for contact in users[anon_id]["contacts"]
            ]
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_main')])
            await query.edit_message_text(
                "üìí –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:",
                reply_markup=InlineKeyboardMarkup(keyboard)
    
    elif query.data == 'new_contact':
        context.user_data["awaiting_contact_id"] = True
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤):")
    
    elif query.data == 'show_id':
        await query.edit_message_text(f"üîë –í–∞—à ID:\n`{anon_id}`", parse_mode='Markdown')
    
    elif query.data == 'help':
        await help_command(update, context)
        return
    
    elif query.data == 'back_to_main':
        keyboard = [
            [InlineKeyboardButton("–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
            [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—É", callback_data='new_contact')],
            [InlineKeyboardButton("–ú–æ–π ID", callback_data='show_id')],
            [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')]
        ]
        await query.edit_message_text(
            "üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif query.data.startswith('write_'):
        contact_id = query.data[6:]
        # –ò—â–µ–º –ø–æ–ª–Ω—ã–π ID –ø–æ –ø–µ—Ä–≤—ã–º —Å–∏–º–≤–æ–ª–∞–º
        full_contact_id = next((uid for uid in users[anon_id]["contacts"] if uid.startswith(contact_id)), None)
        if not full_contact_id:
            await query.edit_message_text("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        context.user_data["current_contact"] = full_contact_id
        await query.edit_message_text(f"‚úâÔ∏è –ü–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {full_contact_id[:8]}...:")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message_text = update.message.text
    
    # –ù–∞—Ö–æ–¥–∏–º anon_id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    anon_id = next((uid for uid, data in users.items() if data["tg_id"] == user.id), None)
    
    if not anon_id:
        await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞–∂–º–∏—Ç–µ /start")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –õ–Æ–ë–û–ú —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    cleanup_old_messages()
    if pending_messages.get(anon_id):
        for msg in pending_messages[anon_id]:
            try:
                await update.message.reply_text(
                    f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {msg['sender']}:\n\n{msg['text']}\n\n"
                    f"üïí {msg['timestamp'].strftime('%d.%m.%Y %H:%M')}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        pending_messages[anon_id] = []
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ ID –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    if context.user_data.get("awaiting_contact_id"):
        contact_id = message_text.strip()
        
        if contact_id == anon_id:
            await update.message.reply_text("üö´ –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
        else:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ–ª–Ω–æ–º—É –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–º—É ID
            found_user = next((uid for uid in users if uid.startswith(contact_id)), None)
            if found_user:
                if found_user not in users[anon_id]["contacts"]:
                    users[anon_id]["contacts"].append(found_user)
                    await update.message.reply_text(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç {found_user[:8]}... –¥–æ–±–∞–≤–ª–µ–Ω!")
                else:
                    await update.message.reply_text("‚ÑπÔ∏è –≠—Ç–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ")
            else:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        context.user_data["awaiting_contact_id"] = False
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—É
    if "current_contact" in context.user_data:
        contact_id = context.user_data["current_contact"]
        
        if contact_id not in users:
            await update.message.reply_text("‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            context.user_data.pop("current_contact", None)
            return
        
        if len(message_text) > 4000:
            await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–∞–∫—Å. 4000 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if contact_id not in pending_messages:
            pending_messages[contact_id] = []
        
        pending_messages[contact_id].append({
            "sender": anon_id,
            "text": message_text,
            "timestamp": datetime.now()
        })
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        try:
            await context.bot.send_message(
                chat_id=users[contact_id]["tg_id"],
                text=f"üîî –£ –≤–∞—Å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {anon_id[:8]}...!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!")
        context.user_data.pop("current_contact", None)
        return
    
    # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    keyboard = [
        [InlineKeyboardButton("–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
        [InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—É", callback_data='new_contact')],
        [InlineKeyboardButton("–ú–æ–π ID", callback_data='show_id')],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')]
    ]
    await update.message.reply_text(
        "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /help",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def main():
    # –ó–∞–º–µ–Ω–∏—Ç–µ '–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    application = ApplicationBuilder().token("–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê").build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    application.run_polling()

if __name__ == '__main__':
    main()